<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Powershell on ZDoc</title><link>https://til.rdz.io/docs/powershell/</link><description>Recent content in Powershell on ZDoc</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Thu, 04 Nov 2021 12:35:02 -0400</lastBuildDate><atom:link href="https://til.rdz.io/docs/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>Reset DSC</title><link>https://til.rdz.io/docs/powershell/reset-dsc/</link><pubDate>Thu, 04 Nov 2021 16:32:45 -0400</pubDate><guid>https://til.rdz.io/docs/powershell/reset-dsc/</guid><description>Reset DSC Local Configuration Manager 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [DscLocalConfigurationManager()] Configuration ResetLCM { Node localhost { Settings { RebootNodeIfNeeded = $True ConfigurationMode = &amp;#39;ApplyAndMonitor&amp;#39; RefreshMode = &amp;#39;Push&amp;#39; ActionAfterReboot = &amp;#39;ContinueConfiguration&amp;#39; } } } ResetLCM -out c:\$env:temp\resetLCM Set-DscLocalConfigurationManager -Path C:\$env:temp\resetLCM -Verbose</description></item><item><title>Windows Update Information</title><link>https://til.rdz.io/docs/powershell/windows-update-information/</link><pubDate>Thu, 04 Nov 2021 14:14:21 -0400</pubDate><guid>https://til.rdz.io/docs/powershell/windows-update-information/</guid><description>Windows Update Information List update history 1 get-wmiobject -class win32_quickfixengineering To list last 50 updates including those without hotfix IDs
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 function Convert-WuaResultCodeToName { param( [Parameter(Mandatory=$true)] [int] $ResultCode ) $Result = $ResultCode switch($ResultCode){ 2{ $Result = &amp;#34;Succeeded&amp;#34; } 3{ $Result = &amp;#34;Succeeded With Errors&amp;#34; } 4{ $Result = &amp;#34;Failed&amp;#34; } } return $Result } function Get-WuaHistory{ # Get a WUA Session $session = (New-Object -ComObject &amp;#39;Microsoft.</description></item><item><title>Enable TLS 1.2 PWSH</title><link>https://til.rdz.io/docs/powershell/tls-support/</link><pubDate>Thu, 04 Nov 2021 14:05:01 -0400</pubDate><guid>https://til.rdz.io/docs/powershell/tls-support/</guid><description>Enable TLS 1.2 Support in Powershell script 1 [Net.ServicePointManager]::SecurityProtocol = &amp;#34;tls12, tls11, tls&amp;#34;</description></item><item><title>Retry Logic</title><link>https://til.rdz.io/docs/powershell/simple-retry-logic/</link><pubDate>Thu, 04 Nov 2021 14:04:32 -0400</pubDate><guid>https://til.rdz.io/docs/powershell/simple-retry-logic/</guid><description>Simple Retry Logic Loop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $Stoploop = $false [int]$Retrycount = &amp;#34;0&amp;#34; do { try { Scripts Commands here Write-Host &amp;#34;Job completed&amp;#34; $Stoploop = $true } catch { if ($Retrycount -gt 3){ Write-Host &amp;#34;Could not complete after 3 retrys.&amp;#34; $Stoploop = $true } else { Write-Host &amp;#34;Could not complete retrying in 30 seconds.</description></item><item><title>Get Virtual Disks</title><link>https://til.rdz.io/docs/powershell/get-virtualdisks-in-cluster/</link><pubDate>Thu, 04 Nov 2021 14:03:31 -0400</pubDate><guid>https://til.rdz.io/docs/powershell/get-virtualdisks-in-cluster/</guid><description>Get Virtual Disks by Node in Failover cluster 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $Nodes = get-storagenode $disks = @() Foreach($node in $nodes){ $pools = Get-StoragePool -StorageNode $node Foreach($pool in $pools){ if($pool.IsPrimordial -eq $true){continue} $info = $pool | Get-VirtualDisk $disks += [PSCustomObject]@{ FriendlyName = $info.FriendlyName ResiliencySettingName = $info.ResiliencySettingName NumberOfColumns = $info.NumberOfColumns Interleave = $info.Interleave Size = $info.</description></item><item><title>Create Storage Spaces</title><link>https://til.rdz.io/docs/powershell/create-storage-space/</link><pubDate>Thu, 04 Nov 2021 14:02:08 -0400</pubDate><guid>https://til.rdz.io/docs/powershell/create-storage-space/</guid><description>Create Storage Space 1 2 3 4 5 6 7 8 9 10 11 12 # Get disk IDs Get-StoragePool -IsPrimordial $true | Get-PhysicalDisk | Where-Object CanPool -eq $True | select-object DeviceId, FriendlyName, @{Name=&amp;#34;Size&amp;#34;;Expression={$_.size/1GB}}, PhysicalLocation | Sort-Object -Property PhysicalLocation # Create Storage pool Example with 3 disk $disks = get-physicaldisk |? {$_.DeviceId -in 2,3,4} New-StoragePool –FriendlyName DataPool1 –StorageSubsystemFriendlyName (Get-StorageSubSystem).FriendlyName –PhysicalDisks $disks # Create Virtual Disk Example using 3 columns and 64k Interleave New-VirtualDisk -FriendlyName Data1 -StoragePoolFriendlyName DataPool1 -ProvisioningType Fixed -ResiliencySettingName Simple -NumberOfColumns 3 -Interleave 65536 –UseMaximumSize # 64K Interleave # Create Volume Example using 64k Allocation Units Get-VirtualDisk –FriendlyName DATA1 | Get-Disk | Initialize-Disk –Passthru | New-Partition –AssignDriveLetter –UseMaximumSize | Format-Volume -NewFileSystemLabel DATA1 -AllocationUnitSize 65536 # 64k Alloc Extending a Storage Pool 1 2 3 4 5 6 7 8 9 10 # Extend Pool $disks = get-physicaldisk |?</description></item><item><title>Capture 4xx/5xx Codes</title><link>https://til.rdz.io/docs/powershell/capture-http-statuscode/</link><pubDate>Thu, 04 Nov 2021 14:01:05 -0400</pubDate><guid>https://til.rdz.io/docs/powershell/capture-http-statuscode/</guid><description>Capture 4xx/5xx Status Codes using Invoke-WebRequest By default IWR throws an error and does not return an object when a 4xx/5xx error is thrown. Use the following to capture those statuses and return them.
1 2 try { $response = Invoke-WebRequest http://localhost/foo } catch { $_.Exception.Response.StatusCode.Value__}</description></item><item><title>Azure Rest API</title><link>https://til.rdz.io/docs/powershell/azure-rest-azprofile/</link><pubDate>Thu, 04 Nov 2021 13:59:56 -0400</pubDate><guid>https://til.rdz.io/docs/powershell/azure-rest-azprofile/</guid><description>Azure Rest API Authentication Using AZ Profile Credentials Rest API References
1 2 3 4 5 6 7 Add-Type -AssemblyName System.Web $resource = &amp;#34;https://management.azure.com&amp;#34; #Set to the root of the API Call. $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext $Token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, $resource).AccessToken $header = @{Authorization = &amp;#34;Bearer &amp;#34; + $token } $results = Invoke-RestMethod -Method Get -Headers $header -uri &amp;#34;&amp;lt;AZURE REST URL&amp;gt;&amp;#34;</description></item><item><title>ADO Powershell Package Repo</title><link>https://til.rdz.io/docs/powershell/azure-devops-powershell-repo/</link><pubDate>Thu, 04 Nov 2021 13:52:26 -0400</pubDate><guid>https://til.rdz.io/docs/powershell/azure-devops-powershell-repo/</guid><description>Publish and Connect to Azure Devops Package Repo for Powershell Use Nuget to package and publish your module 1 2 3 nuget sources Add -Name &amp;#34;PowershellModules&amp;#34; -Source &amp;#34;https://pkgs.dev.azure.com/&amp;lt;ADO ORG NAME&amp;gt;/&amp;lt;ADO PROJECT NAME&amp;gt;/_packaging/&amp;lt;FEED NAME&amp;gt;/nuget/v3/index.json&amp;#34; -username &amp;#34;ADO USERNAME&amp;#34; -password &amp;#34;ADO PAT&amp;#34; nuget pack &amp;lt;NAME OF NUSPEC FILE&amp;gt;.nuspec nuget push -Source &amp;#34;PowershellModules&amp;#34; -ApiKey AzureDevOpsServices &amp;#34;&amp;lt;NAME OF NUPKG&amp;gt;.nupkg&amp;#34; Add Ado Artifact feed as powershell repo 1 2 3 4 5 6 7 $patToken = &amp;#34;PUT TOKEN HERE&amp;#34; | ConvertTo-SecureString -AsPlainText -Force $credsAzureDevopsServices = New-Object System.</description></item><item><title>Powershell Get</title><link>https://til.rdz.io/docs/powershell/add-powershellget/</link><pubDate>Thu, 04 Nov 2021 12:36:26 -0400</pubDate><guid>https://til.rdz.io/docs/powershell/add-powershellget/</guid><description>Powershell Get Package Management Powershell get is the latest package management to handle modules. It is required to install preview releases of modules
To install issue the following powershell command
1 Install-Module PowerShellGet -Force -AllowClobber -SkipPublisherCheck</description></item><item><title/><link>https://til.rdz.io/docs/powershell/get-diskinfo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://til.rdz.io/docs/powershell/get-diskinfo/</guid><description>Get All Disk Info for Storage Node 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 #Requires -Modules ImportExcel #Requires -RunAsAdministrator $node = get-storagenode -Name ([System.</description></item></channel></rss>