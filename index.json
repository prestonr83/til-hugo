[{"content":"Get Waiting Tasks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  /*============================================================================ File: WaitingTasks.sql Summary: Snapshot of waiting tasks SQL Server Versions: 2005 onward ------------------------------------------------------------------------------ Written by Paul S. Randal, SQLskills.com (c) 2019, SQLskills.com. All rights reserved. For more scripts and sample code, check out http://www.SQLskills.com You may alter this code for your own *non-commercial* purposes. You may republish altered code as long as you include this copyright and give due credit, but you must obtain prior permission before blogging this code. THIS CODE AND INFORMATION ARE PROVIDED \u0026#34;AS IS\u0026#34; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. ============================================================================*/SELECT[owt].[session_id]AS[SPID],[owt].[exec_context_id]AS[Thread],[ot].[scheduler_id]AS[Scheduler],[owt].[wait_duration_ms]AS[wait_ms],[owt].[wait_type],[owt].[blocking_session_id]AS[BlockingSPID],[owt].[resource_description],CASE[owt].[wait_type]WHENN\u0026#39;CXPACKET\u0026#39;THENSUBSTRING(-- earlier versions don\u0026#39;t have anything after the nodeID... [owt].[resource_description],CHARINDEX(N\u0026#39;nodeId=\u0026#39;,[owt].[resource_description])+7,CHARINDEX(N\u0026#39; tid=\u0026#39;,[owt].[resource_description]+\u0026#39; tid=\u0026#39;)-CHARINDEX(N\u0026#39;nodeId=\u0026#39;,[owt].[resource_description])-7)ELSENULLENDAS[NodeID],[eqmg].[dop]AS[DOP],[er].[database_id]AS[DBID],CAST(\u0026#39;https://www.sqlskills.com/help/waits/\u0026#39;+[owt].[wait_type]asXML)AS[Help/InfoURL],[eqp].[query_plan],[est].textFROMsys.dm_os_waiting_tasks[owt]INNERJOINsys.dm_os_tasks[ot]ON[owt].[waiting_task_address]=[ot].[task_address]INNERJOINsys.dm_exec_sessions[es]ON[owt].[session_id]=[es].[session_id]INNERJOINsys.dm_exec_requests[er]ON[es].[session_id]=[er].[session_id]FULLJOINsys.dm_exec_query_memory_grants[eqmg]ON[owt].[session_id]=[eqmg].[session_id]OUTERAPPLYsys.dm_exec_sql_text([er].[sql_handle])[est]OUTERAPPLYsys.dm_exec_query_plan([er].[plan_handle])[eqp]WHERE[es].[is_user_process]=1ORDERBY[owt].[session_id],[owt].[exec_context_id];GO  ","description":"","id":0,"section":"docs","tags":null,"title":"Get Waiting Tasks","uri":"https://til.rdz.io/docs/sql/waiting-tasks/"},{"content":"Adding SQL Users and Logins Sql Auth Master Login and User 1 2 3 4 5 6 7 8 9 10 11 12  -- create SQL auth login from master CREATELOGINtestWITHPASSWORD=\u0026#39;SuperSecret!\u0026#39;-- select your db in the dropdown and create a user mapped to a login CREATEUSER[test]FORLOGIN[test]WITHDEFAULT_SCHEMA=dbo;-- add user to role(s) in db ALTERROLEdb_datareaderADDMEMBER[test];ALTERROLEdb_datawriterADDMEMBER[test];  Sql Auth Contained User 1 2 3 4 5 6 7 8  -- select your db in dropdown and create a contained user CREATEUSER[test]WITHPASSWORD=\u0026#39;SuperSecret!\u0026#39;,DEFAULT_SCHEMA=dbo;-- add user to role(s) in db ALTERROLEdb_datareaderADDMEMBER[test];ALTERROLEdb_datawriterADDMEMBER[test];  AAD Auth Contained User 1 2 3 4 5 6 7 8  -- add contained Azure AD user CREATEUSER[name@domain.com]FROMEXTERNALPROVIDERWITHDEFAULT_SCHEMA=dbo;-- add user to role(s) in db ALTERROLEdbmanagerADDMEMBER[name@domain.com];ALTERROLEloginmanagerADDMEMBER[name@domain.com];  AAD Auth Admin User 1 2 3 4 5 6 7 8  -- add contained Azure AD user CREATEUSER[name@domain.com]FROMEXTERNALPROVIDERWITHDEFAULT_SCHEMA=dbo;-- add user to role(s) in db ALTERROLEdbmanagerADDMEMBER[name@domain.com];ALTERROLEloginmanagerADDMEMBER[name@domain.com];  Azure Managed Identity 1 2 3 4  CREATEUSER[\u0026lt;identity-name\u0026gt;]FROMEXTERNALPROVIDER;ALTERROLEdb_datareaderADDMEMBER[\u0026lt;identity-name\u0026gt;];ALTERROLEdb_datawriterADDMEMBER[\u0026lt;identity-name\u0026gt;];ALTERROLEdb_ddladminADDMEMBER[\u0026lt;identity-name\u0026gt;];  If using app service slots prepend slots to the identity /slots/\u0026lt;identity-name\u0026gt; ","description":"","id":1,"section":"docs","tags":null,"title":"SQL User Administration","uri":"https://til.rdz.io/docs/sql/sql-user-administration/"},{"content":"Get Database Sizes 1 2 3 4 5 6 7 8 9 10 11 12 13 14  SELECT[DatabaseName]=DB_NAME(database_id),[Type]=CASEWHENType_Desc=\u0026#39;ROWS\u0026#39;THEN\u0026#39;Data File(s)\u0026#39;WHENType_Desc=\u0026#39;LOG\u0026#39;THEN\u0026#39;Log File(s)\u0026#39;ELSE\u0026#39;Combined Total\u0026#39;END,[SizeinMB]=CAST(((SUM(Size)*8)/1024.0)ASDECIMAL(18,2))FROMsys.master_files--WHERE database_id = DB_ID(‘Database Name’) GROUPBYGROUPINGSETS((DB_NAME(database_id),Type_Desc),(DB_NAME(database_id)))ORDERBYDB_NAME(database_id),Type_DescDESCGO  List all Database filenames and locations 1 2 3 4 5 6 7 8 9  SELECTdb.nameASDBName,mf.nameASFileName,type_descASFileType,Physical_NameASLocationFROMsys.master_filesmfINNERJOINsys.databasesdbONdb.database_id=mf.database_id  List CLR References 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  SELECTso.nameAS[ObjectName],so.[type],SCHEMA_NAME(so.[schema_id])AS[SchemaName],asmbly.nameAS[AssemblyName],asmbly.permission_set_desc,am.assembly_class,am.assembly_methodFROMsys.assembly_modulesamINNERJOINsys.assembliesasmblyONasmbly.assembly_id=am.assembly_idANDasmbly.is_user_defined=1-- if using SQL Server 2008 or newer -- AND asmbly.name NOT LIKE \u0026#39;Microsoft%\u0026#39; -- if using SQL Server 2005 INNERJOINsys.objectssoONso.[object_id]=am.[object_id]UNIONALLSELECTat.nameAS[ObjectName],\u0026#39;UDT\u0026#39;AS[type],SCHEMA_NAME(at.[schema_id])AS[SchemaName],asmbly.nameAS[AssemblyName],asmbly.permission_set_desc,at.assembly_class,NULLAS[assembly_method]FROMsys.assembly_typesatINNERJOINsys.assembliesasmblyONasmbly.assembly_id=at.assembly_idANDasmbly.is_user_defined=1-- if using SQL Server 2008 or newer -- AND asmbly.name NOT LIKE \u0026#39;Microsoft%\u0026#39; -- if using SQL Server 2005 ORDERBY[AssemblyName],[type],[ObjectName]  List User Role Assignments 1 2 3 4 5 6 7 8 9  SELECTDP1.nameASDatabaseRoleName,isnull(DP2.name,\u0026#39;No members\u0026#39;)ASDatabaseUserNameFROMsys.database_role_membersASDRMRIGHTOUTERJOINsys.database_principalsASDP1ONDRM.role_principal_id=DP1.principal_idLEFTOUTERJOINsys.database_principalsASDP2ONDRM.member_principal_id=DP2.principal_idWHEREDP1.type=\u0026#39;R\u0026#39;ORDERBYDP1.name;  ","description":"","id":2,"section":"docs","tags":null,"title":"Get Database Info","uri":"https://til.rdz.io/docs/sql/get-database-info/"},{"content":"Get Backup or Restore Status Execute the following query to get the current backup or restore status with estimated completion time.\n1 2 3 4 5 6 7 8 9  SELECTsession_idASSPID,command,a.TEXTASQuery,start_time,percent_complete,dateadd(second,estimated_completion_time/1000,getdate())ASestimated_completion_timeFROMsys.dm_exec_requestsrCROSSAPPLYsys.dm_exec_sql_text(r.sql_handle)aWHEREr.commandIN(\u0026#39;BACKUP DATABASE\u0026#39;,\u0026#39;RESTORE DATABASE\u0026#39;)  ","description":"Monitor Backup and Restore operations","id":3,"section":"docs","tags":null,"title":"Backup/Restore Monitoring","uri":"https://til.rdz.io/docs/sql/get-backup-or-restore-status/"},{"content":"Find blocking spids/queries Use the following script if not using sp_blitzwho or sp_whoisactive\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  -- List down all the blocking process or root blockers SELECTDISTINCTp1.spidAS[Blocking/RootBlockerSPID],p1.[loginame]AS[RootBlocker_Login],st.textAS[SQLQueryText],p1.[CPU],p1.[Physical_IO],DB_NAME(p1.[dbid])ASDBName,p1.[Program_name],p1.[HostName],p1.[Status],p1.[CMD],p1.[Blocked],p1.[ECID]AS[ExecutionContextID]FROMsys.sysprocessesp1INNERJOINsys.sysprocessesp2ONp1.spid=p2.blockedANDp1.ecid=p2.ecidCROSSAPPLYsys.dm_exec_sql_text(p1.sql_handle)stWHEREp1.blocked=0ORDERBYp1.spid,p1.ecid-- List Down all the blocked processes SELECTp2.spidAS\u0026#39;Blocked SPID\u0026#39;,p2.blockedAS\u0026#39;Blocking/Root Blocker SPID\u0026#39;,p2.[loginame]AS[BlockedSPID_Login],st.textAS[SQLQueryText],p2.[CPU],p2.[Physical_IO],DB_NAME(p2.[dbid])ASDBName,p2.[Program_name],p2.[HostName],p2.[Status],p2.[CMD],p2.ECIDAS[ExecutionContextID]FROMsys.sysprocessesp1INNERJOINsys.sysprocessesp2ONp1.spid=p2.blockedANDp1.ecid=p2.ecidCROSSAPPLYsys.dm_exec_sql_text(p1.sql_handle)st  Find connections and running queries List all active connections  sp_who2 active - Bultin not much details sp_whoIsActive - Much more detailed lots of filtering options Download Link sp_BlitzWho - Great Detail takes a bit longer to execute. Part of First responder kit Download Link  Get full query text for SPID Both sp_whoIsActive and sp_BlitzWho provide the running query. However the following can be used with a SPID without external scripts.\n1  DBCCINPUTBUFFER(\u0026lt;SPID\u0026gt;)  Get Just the running portion of multiquery script from SPID. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  DECLARE@SPIDint;SET@SPID=\u0026lt;SPID\u0026gt;SELECTSDER.[statement_start_offset],SDER.[statement_end_offset],CASEWHENSDER.[statement_start_offset]\u0026gt;0THEN--The start of the active command is not at the beginning of the full command text CASESDER.[statement_end_offset]WHEN-1THEN--The end of the full command is also the end of the active statement SUBSTRING(DEST.TEXT,(SDER.[statement_start_offset]/2)+1,2147483647)ELSE--The end of the active statement is not at the end of the full command SUBSTRING(DEST.TEXT,(SDER.[statement_start_offset]/2)+1,(SDER.[statement_end_offset]-SDER.[statement_start_offset])/2)ENDELSE--1st part of full command is running CASESDER.[statement_end_offset]WHEN-1THEN--The end of the full command is also the end of the active statement RTRIM(LTRIM(DEST.[text]))ELSE--The end of the active statement is not at the end of the full command LEFT(DEST.TEXT,(SDER.[statement_end_offset]/2)+1)ENDENDAS[executingstatement],DEST.[text]AS[fullstatementcode]FROMsys.[dm_exec_requests]SDERCROSSAPPLYsys.[dm_exec_sql_text](SDER.[sql_handle])DESTWHERESDER.session_id=@SPIDORDERBYSDER.[session_id],SDER.[request_id]  SQL Diagnostic Connection When troubleshooting SQL if the server is unresponsive and you are unable to connect via SSMS then you can use a Diagnostic connection.\nMicrosoft Documentation Link - Diagnostic Connection for Database Administrators\nSteps for connection\n Open SSMS Close the Login Window Click File \u0026gt; New \u0026gt; Database Engine Query append admin: to the server name and login with valid SA level credentials  ","description":"Troubleshooting Scripts","id":4,"section":"docs","tags":null,"title":"Troubleshooting","uri":"https://til.rdz.io/docs/sql/troubleshooting/"},{"content":"Drop all tables (Azure Sql Compatible) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  DECLARE@sqlNVARCHAR(2000)WHILE(EXISTS(SELECT1fromINFORMATION_SCHEMA.TABLE_CONSTRAINTSWHERECONSTRAINT_TYPE=\u0026#39;FOREIGN KEY\u0026#39;))BEGINSELECTTOP1@sql=(\u0026#39;ALTER TABLE \u0026#39;+TABLE_SCHEMA+\u0026#39;.[\u0026#39;+TABLE_NAME+\u0026#39;] DROP CONSTRAINT [\u0026#39;+CONSTRAINT_NAME+\u0026#39;]\u0026#39;)FROMINFORMATION_SCHEMA.TABLE_CONSTRAINTSWHERECONSTRAINT_TYPE=\u0026#39;FOREIGN KEY\u0026#39;EXEC(@sql)PRINT@sqlENDWHILE(EXISTS(SELECT*fromINFORMATION_SCHEMA.TABLESWHERETABLE_NAME!=\u0026#39;__MigrationHistory\u0026#39;ANDTABLE_NAME!=\u0026#39;database_firewall_rules\u0026#39;))BEGINSELECTTOP1@sql=(\u0026#39;DROP TABLE \u0026#39;+TABLE_SCHEMA+\u0026#39;.[\u0026#39;+TABLE_NAME+\u0026#39;]\u0026#39;)FROMINFORMATION_SCHEMA.TABLESWHERETABLE_NAME!=\u0026#39;__MigrationHistory\u0026#39;ANDTABLE_NAME!=\u0026#39;database_firewall_rules\u0026#39;EXEC(@sql)PRINT@sqlEND  ","description":"Script to drop all tables","id":5,"section":"docs","tags":null,"title":"Drop All Tables","uri":"https://til.rdz.io/docs/sql/drop-all-tables-azure-sql/"},{"content":"External Table Creation Script Use the following script to create external tables in Azure SQL. Execute in the source DB to parse all tables into the scripts needed to create the external tables.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92  Declare@table_namenvarchar(256)DECLARE@db_namevarchar(max)SET@table_name=\u0026#39;\u0026#39;WHILE@table_nameISNOTNULLBEGINSET@table_name=(SELECTMIN(TABLE_SCHEMA+\u0026#39;.\u0026#39;+TABLE_NAME)FROMINFORMATION_SCHEMA.TABLESWHERETABLE_TYPE=\u0026#39;BASE TABLE\u0026#39;ANDTABLE_SCHEMA+\u0026#39;.\u0026#39;+TABLE_NAME\u0026gt;@table_nameANDTABLE_NAMENOTIN(\u0026#39;MSreplication_subscriptions\u0026#39;,\u0026#39;MSsubscription_agents\u0026#39;,\u0026#39;MSreplication_objects\u0026#39;,\u0026#39;MSsnapshotdeliveryprogress\u0026#39;,\u0026#39;MSsavedforeignkeys\u0026#39;,\u0026#39;MSsavedforeignkeycolumns\u0026#39;,\u0026#39;MSsavedforeignkeyextendedproperties\u0026#39;))DECLARE@object_nameSYSNAME,@object_idINTSELECT@object_name=\u0026#39;[\u0026#39;+s.name+\u0026#39;].[\u0026#39;+o.name+\u0026#39;]\u0026#39;,@object_id=o.[object_id]FROMsys.objectsoWITH(NOWAIT)JOINsys.schemassWITH(NOWAIT)ONo.[schema_id]=s.[schema_id]WHEREs.name+\u0026#39;.\u0026#39;+o.name=@table_nameANDo.[type]=\u0026#39;U\u0026#39;ANDo.is_ms_shipped=0DECLARE@SQLNVARCHAR(MAX)=\u0026#39;\u0026#39;;WITHindex_columnAS(SELECTic.[object_id],ic.index_id,ic.is_descending_key,ic.is_included_column,c.nameFROMsys.index_columnsicWITH(NOWAIT)JOINsys.columnscWITH(NOWAIT)ONic.[object_id]=c.[object_id]ANDic.column_id=c.column_idWHEREic.[object_id]=@object_id),fk_columnsAS(SELECTk.constraint_object_id,cname=c.name,rcname=rc.nameFROMsys.foreign_key_columnskWITH(NOWAIT)JOINsys.columnsrcWITH(NOWAIT)ONrc.[object_id]=k.referenced_object_idANDrc.column_id=k.referenced_column_idJOINsys.columnscWITH(NOWAIT)ONc.[object_id]=k.parent_object_idANDc.column_id=k.parent_column_idWHEREk.parent_object_id=@object_id)SELECT@SQL=\u0026#39;CREATE EXTERNAL TABLE \u0026#39;+@object_name+CHAR(13)+\u0026#39;(\u0026#39;+CHAR(13)+STUFF((SELECTCHAR(9)+\u0026#39;, [\u0026#39;+c.name+\u0026#39;] \u0026#39;+CASEWHENc.is_computed=1THEN\u0026#39;AS \u0026#39;+cc.[definition]ELSE\u0026#39;[\u0026#39;+UPPER(tp.name)+\u0026#39;]\u0026#39;+CASEWHENtp.nameIN(\u0026#39;varchar\u0026#39;,\u0026#39;char\u0026#39;,\u0026#39;varbinary\u0026#39;,\u0026#39;binary\u0026#39;,\u0026#39;text\u0026#39;)THEN\u0026#39;(\u0026#39;+CASEWHENc.max_length=-1THEN\u0026#39;MAX\u0026#39;ELSECAST(c.max_lengthASVARCHAR(5))END+\u0026#39;)\u0026#39;WHENtp.nameIN(\u0026#39;nvarchar\u0026#39;,\u0026#39;nchar\u0026#39;,\u0026#39;ntext\u0026#39;)THEN\u0026#39;(\u0026#39;+CASEWHENc.max_length=-1THEN\u0026#39;MAX\u0026#39;ELSECAST(c.max_length/2ASVARCHAR(5))END+\u0026#39;)\u0026#39;WHENtp.nameIN(\u0026#39;datetime2\u0026#39;,\u0026#39;time2\u0026#39;,\u0026#39;datetimeoffset\u0026#39;)THEN\u0026#39;(\u0026#39;+CAST(c.scaleASVARCHAR(5))+\u0026#39;)\u0026#39;WHENtp.name=\u0026#39;decimal\u0026#39;THEN\u0026#39;(\u0026#39;+CAST(c.[precision]ASVARCHAR(5))+\u0026#39;,\u0026#39;+CAST(c.scaleASVARCHAR(5))+\u0026#39;)\u0026#39;ELSE\u0026#39;\u0026#39;END+CASEWHENc.is_nullable=1THEN\u0026#39; NULL\u0026#39;ELSE\u0026#39; NOT NULL\u0026#39;ENDEND+CHAR(13)FROMsys.columnscWITH(NOWAIT)JOINsys.typestpWITH(NOWAIT)ONc.user_type_id=tp.user_type_idLEFTJOINsys.computed_columnsccWITH(NOWAIT)ONc.[object_id]=cc.[object_id]ANDc.column_id=cc.column_idLEFTJOINsys.default_constraintsdcWITH(NOWAIT)ONc.default_object_id!=0ANDc.[object_id]=dc.parent_object_idANDc.column_id=dc.parent_column_idLEFTJOINsys.identity_columnsicWITH(NOWAIT)ONc.is_identity=1ANDc.[object_id]=ic.[object_id]ANDc.column_id=ic.column_idWHEREc.[object_id]=@object_idORDERBYc.column_idFORXMLPATH(\u0026#39;\u0026#39;),TYPE).value(\u0026#39;.\u0026#39;,\u0026#39;NVARCHAR(MAX)\u0026#39;),1,2,CHAR(9)+\u0026#39; \u0026#39;)+\u0026#39;) WITH (DATA_SOURCE = \u0026#39;+DB_NAME()+\u0026#39;);\u0026#39;+CHAR(13)PRINT@SQLENDGO  ","description":"Script for creating External tables in Azure SQL","id":6,"section":"docs","tags":null,"title":"External Table Creation","uri":"https://til.rdz.io/docs/sql/create-external-tables-scripted/"},{"content":"Add Login Mapping to Linked Server Mapped Login to Remote SQL Login 1 2 3 4 5 6 7 8  USE[master]GOEXECmaster.dbo.sp_addlinkedsrvlogin@rmtsrvname=N\u0026#39;\u0026lt;SERVER NAME\u0026gt;\u0026#39;,@locallogin=N\u0026#39;\u0026lt;LOCAL LOGIN\u0026gt;\u0026#39;,@useself=N\u0026#39;False\u0026#39;,@rmtuser=N\u0026#39;\u0026lt;REMOTE LOGIN\u0026gt;\u0026#39;,@rmtpassword=N\u0026#39;\u0026lt;REMOTE PASSWORD\u0026gt;\u0026#39;  User Impersonation 1 2 3 4 5 6  USE[master]GOEXECmaster.dbo.sp_addlinkedsrvlogin@rmtsrvname=N\u0026#39;\u0026lt;SERVER NAME\u0026gt;\u0026#39;,@locallogin=N\u0026#39;\u0026lt;LOCAL LOGIN\u0026gt;\u0026#39;,@useself=N\u0026#39;True\u0026#39;  Detailed Linked Server Report 1 2 3 4  SELECT*FROMsys.ServersaLEFTOUTERJOINsys.linked_loginsbONb.server_id=a.server_idLEFTOUTERJOINsys.server_principalscONc.principal_id=b.local_principal_id  Find SQL Linked Server Depdendencies 1 2 3 4 5 6 7 8 9 10  SELECTDistinctreferenced_Server_nameAsLinkedServerName,referenced_schema_nameASLinkedServerSchema,referenced_database_nameASLinkedServerDB,referenced_entity_nameAsLinkedServerTable,OBJECT_NAME(referencing_id)ASObjectUsingLinkedServerFROMsys.sql_expression_dependenciesJOINsys.objectsoono.object_id=referencing_id-- WHERE o.name = \u0026#39;\u0026lt;VIEW / SPROC NAME\u0026gt;\u0026#39; --UNCOMMENT TO FILTER ON SPECIFIC VIEW OR SPROC   ","description":"Script for Linked Servers","id":7,"section":"docs","tags":null,"title":"Linked Servers","uri":"https://til.rdz.io/docs/sql/linked-servers/"},{"content":"Reading  Google SRE Series of books  Tools This is a list of misc tools and links I use day to day.\n VS Code Notepads MobaXterm Azure Data Studio Windows Terminal Windows PowerToys Greenshot LICEcap SQL First Responder Kit dbatools sp_whoisactive  ","description":"Miscellaneous Notes","id":8,"section":"docs","tags":null,"title":"Misc","uri":"https://til.rdz.io/docs/misc/"},{"content":"Reset DSC Local Configuration Manager 1 2 3 4 5 6 7 8 9 10 11 12 13 14  [DscLocalConfigurationManager()] Configuration ResetLCM { Node localhost { Settings { RebootNodeIfNeeded = $True ConfigurationMode = \u0026#39;ApplyAndMonitor\u0026#39; RefreshMode = \u0026#39;Push\u0026#39; ActionAfterReboot = \u0026#39;ContinueConfiguration\u0026#39; } } } ResetLCM -out c:\\$env:temp\\resetLCM Set-DscLocalConfigurationManager -Path C:\\$env:temp\\resetLCM -Verbose   ","description":"Reset DSC Configuration","id":9,"section":"docs","tags":null,"title":"Reset DSC","uri":"https://til.rdz.io/docs/powershell/reset-dsc/"},{"content":"Create SPN and Set Permissions for ADO Create the SPN\n1 2 3 4 5  $DisplayName = \u0026#34;mySPN\u0026#34; Add-Type -AssemblyName \u0026#39;System.Web\u0026#39; $password = \u0026#34;$([System.Web.Security.Membership]::GeneratePassword(20, 5))\u0026#34; $credentials = New-Object -TypeName Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential -Property @{ StartDate=Get-Date; EndDate=Get-Date -Year 2024; Password=$password} $spn = New-AzAdServicePrincipal -DisplayName $DisplayName -PasswordCredential $credentials   Set permissions on one more resource groups\n1 2 3 4 5 6 7 8 9 10 11  # Define ResourceGroup Permissions $permissions = @{ Reader = @(\u0026#39;myappRG\u0026#39;) Contributor = @(\u0026#39;StorAcctRG\u0026#39;, \u0026#39;dbRG\u0026#39;) } # Set Permissions Foreach($role in $permissions.Keys){ Foreach($resourceGroup in $permissions.$role){ New-AzRoleAssignment -ObjectId $spn.Id -RoleDefinitionName $role -ResourceGroupName $resourceGroup } }   Output settings for ADO\n1 2 3 4 5 6 7 8 9 10 11 12  # Generate ADO Settings $ctx = get-azcontext $adoSettings = [PSCustomObject]@{ \u0026#39;Subscription ID\u0026#39; = $ctx.Subscription.Id \u0026#39;Subscription Name\u0026#39; = $ctx.Subscription.Name \u0026#39;Service Principal Id\u0026#39; = $spn.ApplicationId \u0026#39;Service Principal Key\u0026#39; = $password \u0026#39;Tenant ID\u0026#39; = $ctx.Subscription.TenantId } # Output ADO Settings $adoSettings   ","description":"Create SPN Using Powershell","id":10,"section":"docs","tags":null,"title":"Create SPN","uri":"https://til.rdz.io/docs/azure/create-spn/"},{"content":"Appservice Vnet Integration Gateway Integration When using gateway integration if you need to peer to another vnet the following must be configured.\nAny changes to routes in the vnet integration may require a Network Sync performed on the App plan\nSource Vnet Ensure that the peering has the following set\n allowVirtualNetworkAccess: true allowForwardedTraffic: true allowGatewayTransit: true  Destination Vnet Ensure that the peering has the following set\n allowVirtualNetworkAccess: true allowForwardedTraffic: true useRemoteGateways: true  App Plan Vnet Integration Add the subnet range to the routes. Either manually within the networking on the App Plan or by using \u0026ldquo;Microsoft.Web/serverfarms/virtualNetworkConnections/routes\u0026rdquo; ARM type.\nExample\n1 2 3 4 5 6 7 8 9 10 11 12 13  ... { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.Web/serverfarms/virtualNetworkConnections/routes\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2019-08-01\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;startAddress\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;endAddress\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;routeType\u0026#34;: \u0026#34;string\u0026#34; } } ...   ","description":"Things to look out for with vnet integration and app services","id":11,"section":"docs","tags":null,"title":"App Service VNET Integration","uri":"https://til.rdz.io/docs/azure/appservice-vnet-integration/"},{"content":"Windows Update Information List update history 1  get-wmiobject -class win32_quickfixengineering   To list last 50 updates including those without hotfix IDs\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  function Convert-WuaResultCodeToName { param( [Parameter(Mandatory=$true)] [int] $ResultCode ) $Result = $ResultCode switch($ResultCode){ 2{ $Result = \u0026#34;Succeeded\u0026#34; } 3{ $Result = \u0026#34;Succeeded With Errors\u0026#34; } 4{ $Result = \u0026#34;Failed\u0026#34; } } return $Result } function Get-WuaHistory{ # Get a WUA Session $session = (New-Object -ComObject \u0026#39;Microsoft.Update.Session\u0026#39;) # Query the latest 1000 History starting with the first recordp $history = $session.QueryHistory(\u0026#34;\u0026#34;,0,50) | ForEach-Object { $Result = Convert-WuaResultCodeToName -ResultCode $_.ResultCode # Make the properties hidden in com properties visible. $_ | Add-Member -MemberType NoteProperty -Value $Result -Name Result $Product = $_.Categories | Where-Object {$_.Type -eq \u0026#39;Product\u0026#39;} | Select-Object -First 1 -ExpandProperty Name $_ | Add-Member -MemberType NoteProperty -Value $_.UpdateIdentity.UpdateId -Name UpdateId $_ | Add-Member -MemberType NoteProperty -Value $_.UpdateIdentity.RevisionNumber -Name RevisionNumber $_ | Add-Member -MemberType NoteProperty -Value $Product -Name Product -PassThru Write-Output $_ } # Remove null records and only return the fields we want $history | Where-Object {![String]::IsNullOrWhiteSpace($_.title)} | Select-Object Result, Date, Title, SupportUrl, Product, UpdateId, RevisionNumber } Get-WuaHistory | Format-Table   List Update settings 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  $AutoUpdateNotificationLevels= @{ 0=\u0026#34;Not configured\u0026#34;; 1=\u0026#34;Disabled\u0026#34;; 2=\u0026#34;Notify before download\u0026#34;; 3=\u0026#34;Notify before installation\u0026#34;; 4=\u0026#34;Scheduled installation\u0026#34; } $AutoUpdateDays=@{ 0=\u0026#34;Every Day\u0026#34;; 1=\u0026#34;Every Sunday\u0026#34;; 2=\u0026#34;Every Monday\u0026#34;; 3=\u0026#34;Every Tuesday\u0026#34;; 4=\u0026#34;Every Wednesday\u0026#34;; 5=\u0026#34;Every Thursday\u0026#34;; 6=\u0026#34;Every Friday\u0026#34;; 7=\u0026#34;Every Saturday\u0026#34; } Function Get-WindowsUpdateConfig{ $AUSettings = (New-Object -com \u0026#34;Microsoft.Update.AutoUpdate\u0026#34;).Settings $AUObj = New-Object -TypeName System.Object Add-Member -inputObject $AuObj -MemberType NoteProperty -Name \u0026#34;NotificationLevel\u0026#34; ` -Value $AutoUpdateNotificationLevels[$AUSettings.NotificationLevel] Add-Member -inputObject $AuObj -MemberType NoteProperty -Name \u0026#34;UpdateDays\u0026#34; ` -Value $AutoUpdateDays[$AUSettings.ScheduledInstallationDay] Add-Member -inputObject $AuObj -MemberType NoteProperty -Name \u0026#34;UpdateHour\u0026#34; ` -Value $AUSettings.ScheduledInstallationTime Add-Member -inputObject $AuObj -MemberType NoteProperty -Name \u0026#34;Recommended updates\u0026#34; ` -Value $(IF ($AUSettings.IncludeRecommendedUpdates) {\u0026#34;Included\u0026#34;} else {\u0026#34;Excluded\u0026#34;}) $AuObj }   ","description":"Listing Updates and Settings using powershell","id":12,"section":"docs","tags":null,"title":"Windows Update Information","uri":"https://til.rdz.io/docs/powershell/windows-update-information/"},{"content":"Enable TLS 1.2 Support in Powershell script 1  [Net.ServicePointManager]::SecurityProtocol = \u0026#34;tls12, tls11, tls\u0026#34;   ","description":"Enabling TLS 1.2 for Powershell","id":13,"section":"docs","tags":null,"title":"Enable TLS 1.2 PWSH","uri":"https://til.rdz.io/docs/powershell/tls-support/"},{"content":"Simple Retry Logic Loop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  $Stoploop = $false [int]$Retrycount = \u0026#34;0\u0026#34; do { try { Scripts Commands here Write-Host \u0026#34;Job completed\u0026#34; $Stoploop = $true } catch { if ($Retrycount -gt 3){ Write-Host \u0026#34;Could not complete after 3 retrys.\u0026#34; $Stoploop = $true } else { Write-Host \u0026#34;Could not complete retrying in 30 seconds...\u0026#34; Start-Sleep -Seconds 30 $Retrycount = $Retrycount + 1 } } } While ($Stoploop -eq $false)   ","description":"","id":14,"section":"docs","tags":null,"title":"Retry Logic","uri":"https://til.rdz.io/docs/powershell/simple-retry-logic/"},{"content":"Get Virtual Disks by Node in Failover cluster 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  $Nodes = get-storagenode $disks = @() Foreach($node in $nodes){ $pools = Get-StoragePool -StorageNode $node Foreach($pool in $pools){ if($pool.IsPrimordial -eq $true){continue} $info = $pool | Get-VirtualDisk $disks += [PSCustomObject]@{ FriendlyName = $info.FriendlyName ResiliencySettingName = $info.ResiliencySettingName NumberOfColumns = $info.NumberOfColumns Interleave = $info.Interleave Size = $info.Size / 1GB Node = $node.Name Pool = $pool.FriendlyName OperationalStatus = $info.OperationalStatus HealthStatus = $info.HealthStatus } } } $disks | ft   ","description":"Get Virtual Disks by Failover Node","id":15,"section":"docs","tags":null,"title":"Get Virtual Disks","uri":"https://til.rdz.io/docs/powershell/get-virtualdisks-in-cluster/"},{"content":"Create Storage Space 1 2 3 4 5 6 7 8 9 10 11 12  # Get disk IDs Get-StoragePool -IsPrimordial $true | Get-PhysicalDisk | Where-Object CanPool -eq $True | select-object DeviceId, FriendlyName, @{Name=\u0026#34;Size\u0026#34;;Expression={$_.size/1GB}}, PhysicalLocation | Sort-Object -Property PhysicalLocation # Create Storage pool Example with 3 disk $disks = get-physicaldisk |? {$_.DeviceId -in 2,3,4} New-StoragePool –FriendlyName DataPool1 –StorageSubsystemFriendlyName (Get-StorageSubSystem).FriendlyName –PhysicalDisks $disks # Create Virtual Disk Example using 3 columns and 64k Interleave New-VirtualDisk -FriendlyName Data1 -StoragePoolFriendlyName DataPool1 -ProvisioningType Fixed -ResiliencySettingName Simple -NumberOfColumns 3 -Interleave 65536 –UseMaximumSize # 64K Interleave # Create Volume Example using 64k Allocation Units Get-VirtualDisk –FriendlyName DATA1 | Get-Disk | Initialize-Disk –Passthru | New-Partition –AssignDriveLetter –UseMaximumSize | Format-Volume -NewFileSystemLabel DATA1 -AllocationUnitSize 65536 # 64k Alloc   Extending a Storage Pool 1 2 3 4 5 6 7 8 9 10  # Extend Pool $disks = get-physicaldisk |? {$_.DeviceId -in 5,6,7} # Set to the Device IDs of the disks Add-PhysicalDisk -PhysicalDisks $disks -StoragePoolFriendlyName DataPool1 # Extend Virtual Disk Get-VirtualDisk Data1 | Resize-VirtualDisk -Size \u0026lt;NEW MAX SIZE\u0026gt; # Extend Volume $Partition = Get-Volume -FileSystemLabel DATA1 | get-partition $Partition | Resize-Partition -Size ($partition |Get-PartitionSupportedSize).sizemax   ","description":"Creating Storage Spaces with Powershell","id":16,"section":"docs","tags":null,"title":"Create Storage Spaces","uri":"https://til.rdz.io/docs/powershell/create-storage-space/"},{"content":"Capture 4xx/5xx Status Codes using Invoke-WebRequest By default IWR throws an error and does not return an object when a 4xx/5xx error is thrown. Use the following to capture those statuses and return them.\n1 2  try { $response = Invoke-WebRequest http://localhost/foo } catch { $_.Exception.Response.StatusCode.Value__}   ","description":"How to capture 4xx/5xx Code with IWR","id":17,"section":"docs","tags":null,"title":"Capture 4xx/5xx Codes","uri":"https://til.rdz.io/docs/powershell/capture-http-statuscode/"},{"content":"Azure Rest API Authentication Using AZ Profile Credentials Rest API References\n1 2 3 4 5 6 7  Add-Type -AssemblyName System.Web $resource = \u0026#34;https://management.azure.com\u0026#34; #Set to the root of the API Call.  $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext $Token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, $resource).AccessToken $header = @{Authorization = \u0026#34;Bearer \u0026#34; + $token } $results = Invoke-RestMethod -Method Get -Headers $header -uri \u0026#34;\u0026lt;AZURE REST URL\u0026gt;\u0026#34;   ","description":"Using Azure Rest API with AZ Profile","id":18,"section":"docs","tags":null,"title":"Azure Rest API","uri":"https://til.rdz.io/docs/powershell/azure-rest-azprofile/"},{"content":"Publish and Connect to Azure Devops Package Repo for Powershell Use Nuget to package and publish your module 1 2 3  nuget sources Add -Name \u0026#34;PowershellModules\u0026#34; -Source \u0026#34;https://pkgs.dev.azure.com/\u0026lt;ADO ORG NAME\u0026gt;/\u0026lt;ADO PROJECT NAME\u0026gt;/_packaging/\u0026lt;FEED NAME\u0026gt;/nuget/v3/index.json\u0026#34; -username \u0026#34;ADO USERNAME\u0026#34; -password \u0026#34;ADO PAT\u0026#34; nuget pack \u0026lt;NAME OF NUSPEC FILE\u0026gt;.nuspec nuget push -Source \u0026#34;PowershellModules\u0026#34; -ApiKey AzureDevOpsServices \u0026#34;\u0026lt;NAME OF NUPKG\u0026gt;.nupkg\u0026#34;   Add Ado Artifact feed as powershell repo 1 2 3 4 5 6 7  $patToken = \u0026#34;PUT TOKEN HERE\u0026#34; | ConvertTo-SecureString -AsPlainText -Force $credsAzureDevopsServices = New-Object System.Management.Automation.PSCredential(\u0026#34;\u0026lt;ADO USERNAME\u0026gt;\u0026#34;, $patToken) Register-PSRepository -Name \u0026#34;PowershellAzureDevopsServices\u0026#34; -SourceLocation \u0026#34;https://pkgs.dev.azure.com/\u0026lt;ADO ORG NAME\u0026gt;/\u0026lt;ADO PROJECT NAME\u0026gt;/_packaging/\u0026lt;FEED NAME\u0026gt;/nuget/v2\u0026#34; -PublishLocation \u0026#34;https://pkgs.dev.azure.com/\u0026lt;ADO ORG NAME\u0026gt;/\u0026lt;ADO PROJECT NAME\u0026gt;/_packaging/\u0026lt;FEED NAME\u0026gt;/nuget/v2\u0026#34; -InstallationPolicy Trusted -Credential $credsAzureDevopsServices Install-Module -Name \u0026lt;MODULE NAME IN REPO\u0026gt; -Repository PowershellAzureDevopsServices -Credential $credsAzureDevopsServices   ","description":"How to setup powershell to use ADO Package Reo","id":19,"section":"docs","tags":null,"title":"ADO Powershell Package Repo","uri":"https://til.rdz.io/docs/powershell/azure-devops-powershell-repo/"},{"content":"Powershell Get Package Management Powershell get is the latest package management to handle modules. It is required to install preview releases of modules\nTo install issue the following powershell command\n1  Install-Module PowerShellGet -Force -AllowClobber -SkipPublisherCheck   ","description":"Adding Powershell Get Package Management","id":20,"section":"docs","tags":null,"title":"Powershell Get","uri":"https://til.rdz.io/docs/powershell/add-powershellget/"},{"content":"Get All Disk Info for Storage Node 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138  #Requires -Modules ImportExcel #Requires -RunAsAdministrator $node = get-storagenode -Name ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname $reportPath = $env:TEMP #### DONT EDIT BELOW #### ### Populate Physical Disks from Node if($node.count -gt 1){ $phydisks = @() foreach($i in $node){ $phydisks += Get-PhysicalDisk -StorageNode $i } } else{ $phydisks = Get-PhysicalDisk -StorageNode $node } ### Get disks from DISKPART $dpscript = New-TemporaryFile Add-Content $dpscript \u0026#34;LIST VOLUME\u0026#34; $dpvols = \u0026amp; diskpart /s $dpscript.FullName $line = 8 $dpdata = @() do{ if(($dpvols[$line] -split \u0026#34; \u0026#34;).Where({$_ -ne \u0026#34;\u0026#34;})[0] -eq\u0026#39;Volume\u0026#39;){ $vol = ($dpvols[$line] -split \u0026#34; \u0026#34;).Where({$_ -ne \u0026#34;\u0026#34;}) if(!($dpvols[($line + 1)].StartsWith(\u0026#39; Volume\u0026#39;)) -and $dpvols[($line + 1)].Length -gt 0 ){ $mount = $dpvols[($line + 1)] $line += 2 } else{ $mount = ($vol -split \u0026#34; \u0026#34;).Where({$_ -ne \u0026#34;\u0026#34;})[2] $line += 1 } $dpscript = New-TemporaryFile Add-Content $dpscript \u0026#34;SELECT $($vol[0]) $($vol[1])\u0026#34; Add-Content $dpscript \u0026#34;DETAIL VOLUME\u0026#34; $detail = \u0026amp; diskpart /s $dpscript.FullName $volType = $vol[5] $volSize = \u0026#34;$($vol[6])$($vol[7])\u0026#34; if($vol.count -eq 7){ $volType = $vol[4] \u0026#34;$($vol[5])$($vol[6])\u0026#34; } foreach($disk in $detail | ? { $_ -like \u0026#34;*Disk [0-9]*\u0026#34;}){ $disk = ($disk -split \u0026#34; \u0026#34;).Where({$_ -ne \u0026#34;\u0026#34;}) $diskID = $disk[1] if($disk[0] -eq \u0026#34;*\u0026#34;){ $diskID = $disk[2] } $dpdata += [pscustomobject]@{ Volume = $vol[1] Name = $vol[2] Mount = $mount.Trim(\u0026#34; \u0026#34;) Type = $vol[4] Size = \u0026#34;$($vol[5])$($vol[6])\u0026#34; DiskId = $diskID } } } else { break } }While ($true) ### MAP together info with WMI $diskInfo = @() $wmiDisks = Get-WmiObject win32_diskdrive Foreach($wmiDisk in $wmiDisks){ $deviceID = $wmiDisk.DeviceID.Trim(\u0026#34;\\\\.\\PHYSICALDRIVE\u0026#34;) $type = $wmiDisk.caption $sn = $wmiDisk.serialnumber $phDisk = $phydisks | ? { $_.deviceid -eq $deviceID } $lun = \u0026#34;\u0026#34; if($phDisk){ $lun = ($phDisk.PhysicalLocation -split \u0026#34;LUN \u0026#34;)[1] } $virtualID = \u0026#34;\u0026#34; $virtualDiskName = \u0026#34;\u0026#34; $columns = \u0026#34;\u0026#34; $mount = ($dpdata | ? {$_.DiskId -eq $deviceID}).Mount if($sn){ $virtualDisk = Get-VirtualDisk | ? {$_.ObjectId -like \u0026#34;*$($sn)*\u0026#34; } $physicalDisk = $virtualDisk | Get-PhysicalDisk $virtualID = $wmiDisk.DeviceID.Trim(\u0026#34;\\\\.\\PHYSICALDRIVE\u0026#34;) $deviceID = $physicalDisk.DeviceId $virtualDiskName = $virtualDisk.FriendlyName $mount = ($dpdata | ? {$_.DiskId -eq $virtualID}).Mount $columns = $virtualDisk.NumberOfColumns foreach($pdrive in $physicalDisk){ $deviceID = $pdrive.DeviceId $phDisk = $phydisks | ? { $_.deviceid -eq $deviceID } if($phDisk){ $lun = ($phDisk.PhysicalLocation -split \u0026#34;LUN \u0026#34;)[1] } $diskInfo += [pscustomobject]@{ DeviceID = $deviceID LUN = $lun Type = $type SerialNumber = $sn VirtualID = $virtualID VirtualDiskName = $virtualDiskName Columns = $columns Mount = $mount } } } else { $diskInfo += [pscustomobject]@{ DeviceID = $deviceID LUN = $lun Type = $type SerialNumber = $sn VirtualID = $virtualID VirtualDiskName = $virtualDiskName Columns = $columns Mount = $mount } } } #Export Report $fdate = (Get-date).ToString(\u0026#34;yyyyMMdd\u0026#34;) $dpdata | Export-Excel \u0026#34;$reportPath\\DiskReport_$fdate.xlsx\u0026#34; -AutoSize -TableName \u0026#34;DISKPART_INFO\u0026#34; -WorksheetName \u0026#39;DISKPART INFO\u0026#39; -Title \u0026#34;DISKPART INFO\u0026#34; $diskInfo | Export-Excel \u0026#34;$reportPath\\DiskReport_$fdate.xlsx\u0026#34; -AutoSize -TableName \u0026#34;VOLUME_INFO\u0026#34; -WorksheetName \u0026#39;VOLUME INFO\u0026#39; -Title \u0026#34;VOLUME INFO\u0026#34; Write-host \u0026#34;Report saved to $reportPath\\DiskReport_$fdate.xlsx\u0026#34;   ","description":"","id":21,"section":"docs","tags":null,"title":"","uri":"https://til.rdz.io/docs/powershell/get-diskinfo/"}]